// Code generated by mockery v2.43.2. DO NOT EDIT.

package metrics

import (
	horizonclient "github.com/stellar/go/clients/horizonclient"
	horizon "github.com/stellar/go/protocols/horizon"

	mock "github.com/stretchr/testify/mock"
)

// MockAccounter is an autogenerated mock type for the Accounter type
type MockAccounter struct {
	mock.Mock
}

type MockAccounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccounter) EXPECT() *MockAccounter_Expecter {
	return &MockAccounter_Expecter{mock: &_m.Mock}
}

// Accounts provides a mock function with given fields: request
func (_m *MockAccounter) Accounts(request horizonclient.AccountsRequest) (horizon.AccountsPage, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Accounts")
	}

	var r0 horizon.AccountsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizonclient.AccountsRequest) (horizon.AccountsPage, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(horizonclient.AccountsRequest) horizon.AccountsPage); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(horizon.AccountsPage)
	}

	if rf, ok := ret.Get(1).(func(horizonclient.AccountsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccounter_Accounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accounts'
type MockAccounter_Accounts_Call struct {
	*mock.Call
}

// Accounts is a helper method to define mock.On call
//   - request horizonclient.AccountsRequest
func (_e *MockAccounter_Expecter) Accounts(request interface{}) *MockAccounter_Accounts_Call {
	return &MockAccounter_Accounts_Call{Call: _e.mock.On("Accounts", request)}
}

func (_c *MockAccounter_Accounts_Call) Run(run func(request horizonclient.AccountsRequest)) *MockAccounter_Accounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizonclient.AccountsRequest))
	})
	return _c
}

func (_c *MockAccounter_Accounts_Call) Return(accounts horizon.AccountsPage, err error) *MockAccounter_Accounts_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockAccounter_Accounts_Call) RunAndReturn(run func(horizonclient.AccountsRequest) (horizon.AccountsPage, error)) *MockAccounter_Accounts_Call {
	_c.Call.Return(run)
	return _c
}

// NextAccountsPage provides a mock function with given fields: page
func (_m *MockAccounter) NextAccountsPage(page horizon.AccountsPage) (horizon.AccountsPage, error) {
	ret := _m.Called(page)

	if len(ret) == 0 {
		panic("no return value specified for NextAccountsPage")
	}

	var r0 horizon.AccountsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(horizon.AccountsPage) (horizon.AccountsPage, error)); ok {
		return rf(page)
	}
	if rf, ok := ret.Get(0).(func(horizon.AccountsPage) horizon.AccountsPage); ok {
		r0 = rf(page)
	} else {
		r0 = ret.Get(0).(horizon.AccountsPage)
	}

	if rf, ok := ret.Get(1).(func(horizon.AccountsPage) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccounter_NextAccountsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextAccountsPage'
type MockAccounter_NextAccountsPage_Call struct {
	*mock.Call
}

// NextAccountsPage is a helper method to define mock.On call
//   - page horizon.AccountsPage
func (_e *MockAccounter_Expecter) NextAccountsPage(page interface{}) *MockAccounter_NextAccountsPage_Call {
	return &MockAccounter_NextAccountsPage_Call{Call: _e.mock.On("NextAccountsPage", page)}
}

func (_c *MockAccounter_NextAccountsPage_Call) Run(run func(page horizon.AccountsPage)) *MockAccounter_NextAccountsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(horizon.AccountsPage))
	})
	return _c
}

func (_c *MockAccounter_NextAccountsPage_Call) Return(accounts horizon.AccountsPage, err error) *MockAccounter_NextAccountsPage_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockAccounter_NextAccountsPage_Call) RunAndReturn(run func(horizon.AccountsPage) (horizon.AccountsPage, error)) *MockAccounter_NextAccountsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccounter creates a new instance of MockAccounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccounter {
	mock := &MockAccounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
